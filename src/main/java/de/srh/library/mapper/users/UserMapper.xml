<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="de.srh.library.mapper.users.UserMapper">

    <select id="getUserById" resultType="de.srh.library.dto.UserDto">
        select * from users where user_id = #{userId}
    </select>

    <select id="getIdByEmail" resultType="long">
        select user_id from users where email = #{email};
    </select>


    <update id="updateUserPassword">
        update users
        set password_hash = #{password}
        where email = #{email}
    </update>

    <select id="userFoundId" resultType="int">
        select count(user_id)
        from users
        Where user_id = #{userId};
    </select>

    <select id="userFoundEmail" resultType="int">
        select count(user_id)
        from users
        Where email = #{email};
    </select>

    <delete id="removeUser" parameterType="de.srh.library.entity.User">
        delete from users
        where user_id= #{userId}
    </delete>


    <!--    Method for User-->
    <update id="updateUserInfo" parameterType="de.srh.library.entity.User">
        update users
        set first_name = #{firstName},family_name = #{familyName}, email = #{email}, address = #{address},update_date = #{updateDate}
        where user_id = #{userId}
    </update>

<!--    Method for Admin-->
    <update id="updateUserData" parameterType="de.srh.library.entity.User">
        update users
        set first_name = #{firstName},family_name = #{familyName}, email = #{email}, address = #{address},update_date = #{updateDate}
        where user_id = #{userId}
    </update>

    <select id="getUserByEmail" resultType="de.srh.library.dto.UserDto">
        select * from users where email = #{email}
    </select>

    <insert id="insertUser" parameterType="de.srh.library.entity.User">
        <selectKey keyProperty="userId" resultType="java.lang.Long" order="AFTER">
            select currval(pg_get_serial_sequence('users', 'user_id')) AS user_id
        </selectKey>

        insert INTO users (
        email, user_role, first_name, family_name, address,
        user_status, password_hash, school_id
        )
        VALUES (
        #{email}, #{userRole}, #{firstName}, #{familyName}, #{address},
        #{userStatus}, #{passwordHash}, #{schoolId}
        )
    </insert>
</mapper>
